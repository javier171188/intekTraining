'use strict';
const { getGroups } = require('./exercise4');

test('Basic test', () => {
    let A = [
        [0, 1, 1],
        [1, 0, 0],
        [1, 0, 0]];
    let groups = getGroups(A);

    expect(groups).toEqual({
        '1': [[0, 1], [0, 2]],
        '2': [[1, 0], [2, 0]]
    })


    A = [
        [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    ];
    groups = getGroups(A);
    expect(groups).toEqual({
        '1': [
            [0, 3], [1, 3], [0, 4],
            [1, 4], [0, 5], [1, 5],
            [2, 5], [1, 6], [2, 6],
            [1, 7], [2, 7], [1, 8],
            [2, 8], [1, 9], [2, 9],
            [3, 9], [2, 10], [3, 10],
            [2, 11], [3, 11], [4, 9],
            [3, 8], [4, 8], [3, 7],
            [4, 7], [2, 4], [2, 3]
        ],
        '2': [
            [6, 1], [6, 2], [7, 2],
            [6, 3], [7, 3], [6, 4],
            [7, 4], [6, 5], [7, 5],
            [6, 6], [7, 6], [6, 7],
            [7, 7], [6, 8], [7, 8],
            [6, 9], [7, 9], [6, 10],
            [7, 10], [6, 11], [7, 11],
            [6, 12], [7, 12], [7, 13],
            [8, 10], [8, 9], [8, 8]
        ]
    })
})

test('Limit cases', () => {
    let A = [
        [0, 1, 0],
        [1, 0, 1],
        [0, 1, 0]];
    let groups = getGroups(A);
    expect(groups).toEqual({
        '1': [[0, 1]],
        '2': [[1, 0]],
        '3': [[1, 2]],
        '4': [[2, 1]]
    });

    A = [
        [1, 0],
        [0, 1]
    ];
    groups = getGroups(A);
    expect(groups).toEqual({
        '1': [[0, 0]],
        '2': [[1, 1]]
    });

    A = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ];
    groups = getGroups(A);
    expect(groups).toEqual({});
})

test('Small matrixes', () => {
    let A = [];
    let groups = getGroups(A);
    expect(groups).toEqual({});

    A = [[0]];
    groups = getGroups(A);
    expect(groups).toEqual({});

    A = [[0, 0], [0, 0]];
    groups = getGroups(A);
    expect(groups).toEqual({});

    A = [[1]];
    groups = getGroups(A);
    expect(groups).toEqual({ '1': [[0, 0]] });

    A = [
        [1, 1],
        [0, 1]
    ];
    groups = getGroups(A);
    expect(groups).toEqual({ '1': [[0, 0], [0, 1], [1, 1]] });

    A = [
        [1, 1],
        [1, 1]
    ];
    groups = getGroups(A);
    expect(groups).toEqual({ '1': [[0, 0], [1, 0], [0, 1], [1, 1]] });
})